Spring Boot笔记
https://spring.io
https://spring.io/projects/spring-boot#learn
https://docs.spring.io/spring-boot/docs/current/reference/html/documentation.html#documentation.web
包含的默认配置
https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters
yml里默认的配置
https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties

1.Spring Boot 版本的标签
1）CURRENT 当前  (CURRENT GA 当前稳定版）
2)SNAPSHOT 迭代备份，快照版本
3)GA 稳定版
4)PRE 预发布版本

2.Application
@SpringBootApplication
存放于根目录下，会默认扫描 controller 和 service，以及 mapper 相关注解组件。
扫描完成后，会放入到spring/springboot 的容器中。

后台的一个简单构成就是： 一个 Application 主程序入口，加若干个 controller 、service、mapper 组件，以及配合组件的若干文件类
配置文件：application.yml  或者 application.properties(不常用)

3.注解分类，按程序结构分
第一种：启动类注解
1）@SpringBootApplication ：Application启动注解

第二种：组件类注解，标记为配置类，会被容器扫描
1）@Service

2）@Controller：定义接口的注解
1、@ResponseBody
2、@RestController：相当于 @Controller 和 @ResponseBody结合，因为现在的规范都是一样的。
3、@RequestMapping("hello")：主要使用以下四种
@GetMapping：查询
@PostMapping：查询，修改，保存，form提交，所以可以通用。
@PutMapping：保存
@DeleteMapping：删除
4、@Autowired 依赖注入，@Configuration 关联定义的 bean 配置类 ；或者 @component 关联的bean 类

3）@Configuration
4）@Bean
5）@repository
6）@Component
这些组件注解也都能使用，根据场景以及累的业务去使用和定义

具体使用：properties文件关联
1）@Component //被容器扫描，并放入容器中
2）@ConfigurationProperties(prefix = "person")//配置的前缀
3）@PropertySource(value= "classpath:Person.properties",encoding = "utf-8")//关联配置文件
resource下的 Person.properties 文件编译后的路径是在 classpath 下。

相关配置工具
<artifactId>spring-boot-configuration-processor</artifactId>

4.bootstrap.yml 与 application.yml
bootstrap.yml 加载优先于 application.yml
aoolication.yml 比 bootstrap.yml 常用
application.yml 主要用于 springboot 项目的配置,服务于 Application
bootstrap 中的属性不会被覆盖。
bootstrap.yml：主要用于 springCloud 加密解密 固定参数

5.application.yml 配置
resource 文件编译后的路径是 classpath ，之后的相同

1）可以配置自定义属性。
2）static 静态资源默认文件目录，在resource下创建 static 目录，可默认引用，也可自定义引用的路径。但文件名不会变。
  #  mvc:
  #    static-path-pattern: /custompath/** # 修改静态文件static默认引用的路径，默认是不加 static 的。
3）修改启动logo：文件在 resource 下的 banner 目录下
第一种
  banner:
    location: classpath:banner/banner.txt
第二种
  banner:
    image:
      location: classpath:banner/banner06.png
      pixelmode: text
      pixelmode: block
4）static 中定义的 index.html


6.lombok：bean（pojo） 文件类的注解,一旦使用，开发团队需要统一使用。不然会有编译不通过的问题。
1）@Data 生成参数的get与set
2）@ToString  生成tostring方法
3）@NoArgsConstructor  生成默认构造函数
4）@AllArgsConstructor 生成全参构造函数
5）@Slf4j 日志输出

7.RestFul 接口请求风格
1）@GetMapping：查询
2）@PostMapping：查询，修改，保存，form提交，所以可以通用。
3）@PutMapping：保存
4）@DeleteMapping：删除

全都使用的话为强制规范，只使用get与post是弱规范

8.接收参数的常用用注解
1）@RequestParam  用于获得url中?后的参数，如果参数变量名保持一致，该注解可以省略
2）@PathVariable  路径的参数，?之前配置的动态参数，如id之类的。
3）@RequestBody   请求体的对象 json请求体
4）@RequestHeader 请求头的参数，token
5）@CookieValue   cookie



09.定时任务
1）@Configuration
//@Configuration          //1.标记配置类，让springboot容器可以扫描到
//@EnableScheduling       //2.开启定时任务
    @Scheduled(cron = "0 */1 * * * ?")
    public void publicMsg(){
        log.warn("开始执行定时任务："+ LocalDateTime.now());
    }
Cron表达式范例：
*/5 * * * * ?：每隔5秒执行一次
0 */1 * * * ?：每隔1分钟执行一次
0 0 23 * * ?：每天23点执行一次
0 0 1 * * ?：每天凌晨1点执行一次：
0 0 1 1 * ?：每月1号凌晨1点执行一次
0 0 23 L * ?： 每月最后一天23点执行一次
0 0 1 ? * L：每周星期天凌晨1点实行一次
0 26,29,33 * * * ?： 在26分、29分、33分执行一次
0 0 0,13,18,21 * * ?： 每天的0点、13点、18点、21点都执行一次


10.异步任务
@Component          //1.标记配置类，让springboot容器可以扫描到
@EnableAsync       //2.开启延时任务
@Slf4j
public class MyAsyncTask {

//    @Scheduled(cron = "*/5 * * * * ?")
    @Async
    public void publicMsg(){
        try {
            Thread.sleep(5000);
            log.warn("异步任务执行完成："+ LocalDateTime.now());
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

11.数据操作层
持久层框架
1）Hibernate
2）JPA
3）MyBatis：主要的。

12.数据源
1）C3P0：老项目有些会用
2）DBCP：阿帕奇的
3）druid：阿里的，springboot2.0以前用
4）BoneCP：不更新了

springBoot默认的数据源：
HicariCp
性能高效，速度快
代码精简化

mysql/mariadb
mariadb.org

13.Hibernate 常用校验注解
1）@NotNull      不能为空
2）@NotEmpty     不为空，空字符也不行
3）@NotBlank     字符串不能为空
4）@Min(Value)
5）@Max(Value)
6）@Size(max,min)        指定集合长度范围
7）@Length(min=,max=)    字符串的长度
8）@Email
9）@Range
10）@Valid

14.添加数据 insert

15.查询数据 select

16.添加数据 update
1）updateByExample(stu, example);            更新全部，为null，也会覆盖更新
2）updateByExampleSelective(stu, example);   有选择的更新，即为null的数据不更新
3）updateByPrimaryKey(stu);                  更新全部，为null，也会覆盖更新
4）updateByPrimaryKeySelective(stu);         有选择的更新，即为null的数据不更新

17.删除数据 delete
1）studentMapper.delete(stu);                            根据对象中属性值匹配做条件删除
2）studentMapper.deleteByExample(stu, example);          自定义删除条件
3）studentMapper.deleteByPrimaryKey(stu.getUserid());    通过主键来删除

18.事务：把一段代码同合成一个整体，中途发生错误，这段代码已经执行过的操作，会被回滚。
    @Transactional(propagation = Propagation.REQUIRED)
0）REQUIRED(0)
1）SUPPORTS(1)
2）MANDATORY(2)
3）REQUIRES_NEW(3)
4）NOT_SUPPORTED(4)
5）NEVER(5)
6）NESTED(6)
